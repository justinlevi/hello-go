name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Get dependencies
      run: |
        go mod download
        go mod verify

    - name: Run gofmt
      run: |
        gofmt_output=$(gofmt -l .)
        if [ -n "$gofmt_output" ]; then
          echo "The following files need formatting:"
          echo "$gofmt_output"
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build
      run: |
        go build -v -o hello-api .
        ./hello-api &
        sleep 2
        curl -f http://localhost:8080/health || exit 1
        pkill hello-api

    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o hello-api-linux-amd64
        GOOS=darwin GOARCH=amd64 go build -o hello-api-darwin-amd64
        GOOS=windows GOARCH=amd64 go build -o hello-api-windows-amd64.exe

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: hello-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run -d -p 8080:8080 --name test-container hello-api:latest
        sleep 5
        curl -f http://localhost:8080/health || exit 1
        docker logs test-container
        docker stop test-container
        docker rm test-container